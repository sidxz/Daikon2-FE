import { observer } from "mobx-react-lite";
import { Chip } from "primereact/chip";
import { InputText } from "primereact/inputtext";
import { Skeleton } from "primereact/skeleton";
import { useContext, useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";
import { STRINGS } from "../../../Customizations/strings";
import { RootStoreContext } from "../../../RootStore";
import ParsedDocTable from "../ParsedDocTable/ParsedDocTable";

const ParsedDocsByTags = () => {
  const rootStore = useContext(RootStoreContext);
  const { fetchDocsByTags, isFetchingDocs, docListByTags, isEditingDoc } =
    rootStore.parsedDocStore;

  const [searchParams, setSearchParams] = useSearchParams();
  const [newTag, setNewTag] = useState("");

  // Sanitize tags: Remove empty strings and ensure valid tag values
  const tags = (searchParams.get("tags")?.split(",") || []).filter(
    (tag) => tag.trim() !== ""
  );

  // Fetch documents whenever `tags` in the URL changes
  useEffect(() => {
    if (tags.length > 0) {
      fetchDocsByTags(tags);
    }
  }, [tags, fetchDocsByTags]);

  // Handle tag removal and update URL
  const handleTagRemove = (tagToRemove) => {
    const updatedTags = tags.filter((tag) => tag !== tagToRemove);
    setSearchParams({ tags: updatedTags.join(",") });
  };

  // Handle adding a new tag
  const handleAddTag = () => {
    const sanitizedTag = newTag.trim();
    if (sanitizedTag && !tags.includes(sanitizedTag)) {
      const updatedTags = [...tags, sanitizedTag];
      setSearchParams({ tags: updatedTags.join(",") });
      setNewTag(""); // Clear the input field
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleAddTag();
    }
  };

  const docs = docListByTags(tags);

  return (
    <div className="flex flex-column w-full flex-grow gap-1">
      <div className="flex w-full p-2 mr-2 text-sm bg-orange-100 border-1 border-round-md border-orange-200">
        Generated by DAIKON AI-Document-Store
        <sup className="ml-1 mr-1"> Beta</sup>. Please verify before use, as AI
        outputs may not always be accurate. {STRINGS.DOCUSTORE_ML_USAGE_NOTICE}
      </div>
      <div className="flex w-full p-2 mr-2 text-sm bg-white-100 border-1 border-round-md border-bluegray-100 align-items-center justify-content-between">
        {/* Tags container aligned to the left */}
        <div className="flex flex-wrap gap-2">
          {tags.map((tag) => (
            <Chip
              key={tag}
              label={tag}
              removable
              onRemove={() => handleTagRemove(tag)}
            />
          ))}
        </div>
        {/* Input field aligned to the right */}
        <div className="flex align-items-center">
          <InputText
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") handleAddTag(); // Detect "Enter" and add the tag
            }}
            placeholder="Add a tag"
            className="w-full max-w-sm p-inputtext-sm"
          />
        </div>
      </div>

      <div className="flex w-full flex-grow fadein animation-duration-1000">
        {isFetchingDocs || isEditingDoc ? (
          <Skeleton width="100%" height="40rem"></Skeleton>
        ) : (
          <ParsedDocTable docs={docs} />
        )}
      </div>
    </div>
  );
};

export default observer(ParsedDocsByTags);
