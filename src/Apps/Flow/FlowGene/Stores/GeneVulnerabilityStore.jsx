import { action, makeObservable, observable, runInAction } from "mobx";
import { toast } from "react-toastify";
import GeneVulnerabilityAPI from "../api/GeneVulnerabilityAPI";

export default class GeneVulnerabilityStore {
  rootStore;

  constructor(rootStore) {
    this.rootStore = rootStore;
    makeObservable(this, {
      isUpdatingVulnerability: observable,
      updateVulnerability: action,

      isAddingVulnerability: observable,
      addVulnerability: action,

      isDeletingVulnerability: observable,
      deleteVulnerability: action,
    });
  }

  // Observables
  isUpdatingVulnerability = false;
  isAddingVulnerability = false;
  isDeletingVulnerability = false;

  // Actions
  addVulnerability = async (vulnerability) => {
    this.isAddingVulnerability = true;

    // Ensure vulnerability.geneId is set, fallback to selectedGene.geneId if null, undefined, or empty
    vulnerability.geneId =
      vulnerability.geneId?.trim() || this.rootStore.geneStore.selectedGene.Id;

    try {
      var res = await GeneVulnerabilityAPI.create(vulnerability);
      runInAction(() => {
        // Add vulnerability to gene vulnerability list
        vulnerability.id = res.id;

        this.rootStore.geneStore.selectedGene.vulnerabilities.push(
          vulnerability
        );
        const gene = this.rootStore.geneStore.geneRegistry.get(
          vulnerability.geneId
        );
        gene.vulnerabilities.push(vulnerability);

        toast.success("Gene vulnerability added successfully");
      });
    } catch (error) {
      console.error("Error adding gene vulnerability:", error);
    } finally {
      runInAction(() => {
        this.isAddingVulnerability = false;
      });
    }
  };

  updateVulnerability = async (vulnerability) => {
    this.isUpdatingVulnerability = true;

    // Ensure vulnerability.geneId is set, fallback to selectedGene.geneId if null, undefined, or empty
    vulnerability.geneId =
      vulnerability.geneId?.trim() || this.rootStore.geneStore.selectedGene.id;

    // Ensure vulnerability.id is not null, undefined, or empty
    if (!vulnerability.id?.trim()) {
      throw new Error("id is required and cannot be empty.");
    }

    try {
      await GeneVulnerabilityAPI.update(vulnerability);
      runInAction(() => {
        // update in gene registry list
        const gene = this.rootStore.geneStore.geneRegistry.get(
          vulnerability.geneId
        );

        const indexOfEss = gene.vulnerabilities.findIndex(
          (e) => e.id === vulnerability.id
        );
        gene.vulnerabilities[indexOfEss] = vulnerability;

        // update the same in selected gene
        const selectedGene = this.rootStore.geneStore.selectedGene;
        const selectedIndex = selectedGene.vulnerabilities.findIndex(
          (e) => e.id === vulnerability.id
        );

        selectedGene.vulnerabilities[selectedIndex] = vulnerability;

        toast.success("Gene vulnerability updated successfully");
      });
    } catch (error) {
      console.error("Error updating gene vulnerability:", error);
    } finally {
      runInAction(() => {
        this.isUpdatingVulnerability = false;
      });
    }
  };

  deleteVulnerability = async (id) => {
    this.isDeletingVulnerability = true;

    const geneId = this.rootStore.geneStore.selectedGene.id;

    // Ensure id is not null, undefined, or empty
    if (!id?.trim()) {
      throw new Error("id is required and cannot be empty.");
    }

    try {
      await GeneVulnerabilityAPI.delete(geneId, id);
      runInAction(() => {
        // remove vulnerability from gene vulnerability list
        const gene = this.rootStore.geneStore.geneRegistry.get(geneId);
        const indexOfEss = gene.vulnerabilities.findIndex((e) => e.id === id);
        gene.vulnerabilities.splice(indexOfEss, 1);

        // remove the same from selected gene
        const selectedGene = this.rootStore.geneStore.selectedGene;
        const selectedIndex = selectedGene.vulnerabilities.findIndex(
          (e) => e.id === id
        );
        selectedGene.vulnerabilities.splice(selectedIndex, 1);

        toast.success("Gene vulnerability deleted successfully");
      });
    } catch (error) {
      console.error("Error deleting gene vulnerability:", error);
    } finally {
      runInAction(() => {
        this.isDeletingVulnerability = false;
      });
    }
  };
}
