import { useFormik } from "formik";
import { Button } from "primereact/button";
import { InputText } from "primereact/inputtext";
import { InputTextarea } from "primereact/inputtextarea";
import { classNames } from "primereact/utils";
import React from "react";

const FGVPrVulnerabilityAddForm = ({
  selectedGene,
  isAddingVulnerability,
  addVulnerability,
  closeSidebar,
}) => {
  const formik = useFormik({
    initialValues: {
      rank: "",
      viUpperBound: "",
      viLowerBound: "",
      url: "",
      reference: "",
      vulnerabilityIndex: "",
      vulnerabilityCondition: "",
      tnSeqEss: "",
      crisprEss: "",
      highConfidenceVulnerabilityCall: "",
    },

    validate: (values) => {
      const errors = {};
      if (!values.rank) errors.rank = "Production is required.";
      // Additional validations can be added here
      return errors;
    },

    onSubmit: (vulnerability) => {
      vulnerability.geneId = selectedGene.id;
      addVulnerability(vulnerability).then(() => {
        closeSidebar();
        formik.resetForm();
      });
    },
  });

  // Helper functions for form validation and error messages
  const isInvalid = (field) => formik.touched[field] && formik.errors[field];
  const getErrorMessage = (field) =>
    isInvalid(field) && (
      <small className="p-error">{formik.errors[field]}</small>
    );

  return (
    <div className="card w-full">
      <form onSubmit={formik.handleSubmit} className="p-fluid">
        <div className="field">
          <label
            htmlFor="rank"
            className={classNames({ "p-error": isInvalid("rank") })}
          >
            Rank *
          </label>
          <InputTextarea
            id="rank"
            value={formik.values.rank}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("rank"),
            })}
          />

          {getErrorMessage("rank")}
        </div>

        <div className="field">
          <label
            htmlFor="viUpperBound"
            className={classNames({
              "p-error": isInvalid("viUpperBound"),
            })}
          >
            VI Upper Bound
          </label>
          <InputTextarea
            id="viUpperBound"
            value={formik.values.viUpperBound}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("viUpperBound"),
            })}
          />
          {getErrorMessage("viUpperBound")}
        </div>

        <div className="field">
          <label
            htmlFor="viLowerBound"
            className={classNames({
              "p-error": isInvalid("viLowerBound"),
            })}
          >
            VI Lower Bound
          </label>
          <InputText
            id="viLowerBound"
            value={formik.values.viLowerBound}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("viLowerBound"),
            })}
          />
          {getErrorMessage("viLowerBound")}
        </div>

        <div className="field">
          <label
            htmlFor="url"
            className={classNames({
              "p-error": isInvalid("url"),
            })}
          >
            URL
          </label>
          <InputText
            id="url"
            value={formik.values.url}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("url"),
            })}
          />
          {getErrorMessage("url")}
        </div>

        <div className="field">
          <label
            htmlFor="vulnerabilityIndex"
            className={classNames({
              "p-error": isInvalid("vulnerabilityIndex"),
            })}
          >
            Vulnerability Index
          </label>
          <InputText
            id="vulnerabilityIndex"
            value={formik.values.vulnerabilityIndex}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("vulnerabilityIndex"),
            })}
          />
          {getErrorMessage("vulnerabilityIndex")}
        </div>

        <div className="field">
          <label
            htmlFor="vulnerabilityCondition"
            className={classNames({
              "p-error": isInvalid("vulnerabilityCondition"),
            })}
          >
            Vulnerability Condition
          </label>
          <InputTextarea
            id="vulnerabilityCondition"
            value={formik.values.vulnerabilityCondition}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("vulnerabilityCondition"),
            })}
          />
          {getErrorMessage("vulnerabilityCondition")}
        </div>

        <div>
          <label
            htmlFor="tnSeqEss"
            className={classNames({
              "p-error": isInvalid("tnSeqEss"),
            })}
          >
            TnSeq Ess
          </label>
          <InputTextarea
            id="tnSeqEss"
            value={formik.values.tnSeqEss}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("tnSeqEss"),
            })}
          />
          {getErrorMessage("tnSeqEss")}
        </div>

        <div>
          <label
            htmlFor="crisprEss"
            className={classNames({
              "p-error": isInvalid("crisprEss"),
            })}
          >
            CRISPR Ess
          </label>
          <InputTextarea
            id="crisprEss"
            value={formik.values.crisprEss}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("crisprEss"),
            })}
          />
          {getErrorMessage("crisprEss")}
        </div>

        <div>
          <label
            htmlFor="highConfidenceVulnerabilityCall"
            className={classNames({
              "p-error": isInvalid("highConfidenceVulnerabilityCall"),
            })}
          >
            High-Confidence vulnerability call
          </label>
          <InputTextarea
            id="highConfidenceVulnerabilityCall"
            value={formik.values.highConfidenceVulnerabilityCall}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("highConfidenceVulnerabilityCall"),
            })}
          />
          {getErrorMessage("highConfidenceVulnerabilityCall")}
        </div>

        <div className="field">
          <label
            htmlFor="reference"
            className={classNames({
              "p-error": isInvalid("reference"),
            })}
          >
            Reference
          </label>
          <InputTextarea
            id="reference"
            value={formik.values.reference}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isInvalid("reference"),
            })}
          />
          {getErrorMessage("reference")}
        </div>

        <div className="flex justify-content-end">
          <Button
            icon="icon icon-common icon-database-submit"
            type="submit"
            label="Add to database"
            className="p-button-secondary p-button-sm"
            loading={isAddingVulnerability}
          />
        </div>
      </form>
    </div>
  );
};

export default FGVPrVulnerabilityAddForm;
