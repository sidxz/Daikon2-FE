import { Skeleton } from "primereact/skeleton";
import React, { useEffect, useState } from "react";
import { loadRDKit } from "../utils/rdkitLoader"; // Adjust the path as needed
import "./MoleculeStructure.css";

const MoleculeStructure = ({
  id = "",
  className = "",
  width = 250,
  height = 250,
  structure, // SMILES string for the molecule to be rendered
  subStructure, // Optional SMILES string for a substructure to highlight
  extraDetails = {}, // Additional customization details for molecule rendering
}) => {
  // State to store the SVG content generated by RDKit
  const [svg, setSvg] = useState(null);

  // State to track whether RDKit has been successfully loaded
  const [rdKitLoaded, setRdKitLoaded] = useState(false);

  // State to track any errors
  const [rdKitError, setRdKitError] = useState(false);
  const [renderError, setRenderError] = useState(false);

  useEffect(() => {
    let isMounted = true;

    const MOL_DETAILS = {
      width,
      height,
      bondLineWidth: 1,
      addStereoAnnotation: true,
      ...extraDetails,
    };

    const initializeRDKit = async () => {
      try {
        const RDKit = await loadRDKit();
        if (!isMounted) return;

        setRdKitLoaded(true);

        if (!isValidSMILES(RDKit, structure)) {
          console.error("Invalid SMILES structure.");
          setRenderError(true);
          return;
        }

        // Validate and optionally prepare the substructure SMILES for highlighting
        const validatedSubStructure =
          subStructure && isValidSMILES(RDKit, subStructure)
            ? subStructure
            : null;

        // Draw the molecule and apply any substructure highlights
        drawMolecule(RDKit, structure, validatedSubStructure, MOL_DETAILS);
      } catch (error) {
        console.error("Error loading RDKit:", error);
        setRdKitError(true);
      }
    };

    // Function to validate the SMILES string using RDKitJS
    const isValidSMILES = (RDKit, smiles) => {
      let mol;
      try {
        mol = RDKit.get_mol(smiles);
        return mol !== null;
      } catch {
        return false;
      } finally {
        if (mol) mol.delete();
      }
    };

    const drawMolecule = (
      RDKit,
      structure,
      validatedSubStructure,
      molDetails
    ) => {
      let mol, qmol;
      try {
        mol = RDKit.get_mol(structure);

        if (validatedSubStructure) {
          qmol = RDKit.get_qmol(validatedSubStructure);
          const matches = mol.get_substruct_match(qmol);
          if (matches) {
            const parsedMatches = JSON.parse(matches);
            if (parsedMatches?.atoms?.length > 0) {
              molDetails = {
                ...molDetails,
                atoms: parsedMatches.atoms,
                bonds: parsedMatches.bonds,
                highlight_atom_colors: {},
                highlight_bond_colors: {},
                highlight_color: [0, 1, 0, 1],
              };
            } else {
              console.warn("Substructure not found in the main structure.");
            }
          }
        }

        const svgContent = mol.get_svg_with_highlights(
          JSON.stringify(molDetails)
        );
        if (isMounted) setSvg(svgContent);
      } catch (error) {
        console.error("Error during molecule rendering:", error);
        setRenderError(true);
      } finally {
        // Clean up molecule objects to prevent memory leaks
        if (mol) mol.delete();
        if (qmol) qmol.delete();
      }
    };

    initializeRDKit();

    return () => {
      // Cleanup function to prevent memory leaks and state updates after unmount
      isMounted = false;
    };
  }, [structure, subStructure, width, height, extraDetails]);

  if (rdKitError) return <div>Error loading RDKit renderer.</div>;
  if (renderError) return <div>Error rendering the molecule structure.</div>;
  if (!rdKitLoaded || !svg) return <Skeleton width={width} height={height} />;

  return (
    <div
      title={structure}
      className={`molecule-structure-svg`}
      style={{ width, height }}
      dangerouslySetInnerHTML={{ __html: svg }}
    ></div>
  );
};

export default MoleculeStructure;
