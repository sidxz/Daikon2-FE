name: DAIKON_frontend_workflow

env:
  # Production workflow - additional workflows should be added for each branch/environment (/dev -> development, tagged release candidate -> UAT, PRD)
  ENVIRONMENT: prd
  APP_VERSION: v1.2
  AZURE_KEY_VAULT_NAME: daikon-prd-kv
  
on:
  workflow_dispatch:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:
    branches:
    - master
    tags:
    - '*'

jobs:
 build-and-deploy-dev:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: "Checkout GitHub Action"
        uses: actions/checkout@master
      - name: "Set variables for DEV environment"
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "AZURE_KEY_VAULT_NAME=daikon-dev-kv" >> $GITHUB_ENV
          echo "AZURE_CREDENTIALS_ENV='${{ secrets.AZURE_CREDENTIALS_DEV }}'" >> $GITHUB_ENV
          echo "DONE: DEV variables set"
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS_DEV }}'
      - name: 'Get secrets'
        id: azure-keyvault
        run: |
          secrets_get=(AZURE-CLIENT-ID AZURE-TENANT-ID AZURE-RESOURCE-GROUP github-actions-registry-login-server github-actions-registry-username github-actions-registry-password)
          for secret_get in ${secrets_get[@]}
          do
            value=$(az keyvault secret show --name $secret_get --vault-name ${{ env.AZURE_KEY_VAULT_NAME }} --query value --output tsv)
            echo "::add-mask::$value"
            echo "$secret_get=$value" >> $GITHUB_OUTPUT
          done
      - name: "Build and push image"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}
          username: ${{ steps.azure-keyvault.outputs.github-actions-registry-username }}
          password: ${{ steps.azure-keyvault.outputs.github-actions-registry-password }}
      - run: |
          echo 'export const appConfig = {
          REACT_APP_MSAL_CLIENT_ID: "${{ steps.azure-keyvault.outputs.AZURE-CLIENT-ID }}",
          REACT_APP_WEB_API_BASE_URI: "https://tbda-${{ env.ENVIRONMENT }}-frontend.azurewebsites.net/api/",
          REACT_APP_MSAL_CLIENT_SCOPE: "api://${{ steps.azure-keyvault.outputs.AZURE-CLIENT-ID }}/access_as_user",
          REACT_APP_MSAL_TENANT_AUTHORITY_URI: "https://login.microsoftonline.com/${{ steps.azure-keyvault.outputs.AZURE-TENANT-ID }}",
          REACT_APP_MSAL_CACHE_LOCATION: "sessionStorage",
          REACT_APP_MSAL_AUTH_STATE_IN_COOKIE: "false",
          REACT_APP_MSAL_LOGIN_REDIRECT_URI: "https://tbda-${{ env.ENVIRONMENT }}-frontend.azurewebsites.net/" };
          export const appVersion = {
              release: "v0.1.2",
              stream: "Enterprise",
              channel: "Beta" };' > ./src/config.js

          docker build . -t ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend:${{ github.sha }} -t ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend:latest
          docker push --all-tags ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend
 build-and-deploy-prd:
      if: startsWith(github.ref, 'refs/tags/Release-v')
      runs-on: ubuntu-latest
      steps:
        - name: "Checkout GitHub Action"
          uses: actions/checkout@master
        - name: "Set variables for PRD environment"
          run: |
            echo "ENVIRONMENT=prd" >> $GITHUB_ENV
            echo "AZURE_KEY_VAULT_NAME=daikon-prd-kv" >> $GITHUB_ENV
            echo "DONE: PRD variables set"
        - name: "Login via Azure CLI"
          uses: azure/login@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
        - name: 'Get secrets'
          id: azure-keyvault
          run: |
            secrets_get=(AZURE-CLIENT-ID AZURE-TENANT-ID AZURE-RESOURCE-GROUP github-actions-registry-login-server github-actions-registry-username github-actions-registry-password)
            for secret_get in ${secrets_get[@]}
            do
              value=$(az keyvault secret show --name $secret_get --vault-name ${{ env.AZURE_KEY_VAULT_NAME }} --query value --output tsv)
              echo "::add-mask::$value"
              echo "$secret_get=$value" >> $GITHUB_OUTPUT
            done
        - name: "Build and push image"
          uses: azure/docker-login@v1
          with:
            login-server: ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}
            username: ${{ steps.azure-keyvault.outputs.github-actions-registry-username }}
            password: ${{ steps.azure-keyvault.outputs.github-actions-registry-password }}
        - run: |
            echo 'export const appConfig = {
            REACT_APP_MSAL_CLIENT_ID: "${{ steps.azure-keyvault.outputs.AZURE-CLIENT-ID }}",
            REACT_APP_WEB_API_BASE_URI: "https://daikon-${{ env.ENVIRONMENT }}-frontend.azurewebsites.net/api/",
            REACT_APP_MSAL_CLIENT_SCOPE: "api://${{ steps.azure-keyvault.outputs.AZURE-CLIENT-ID }}/access_as_user",
            REACT_APP_MSAL_TENANT_AUTHORITY_URI: "https://login.microsoftonline.com/${{ steps.azure-keyvault.outputs.AZURE-TENANT-ID }}",
            REACT_APP_MSAL_CACHE_LOCATION: "sessionStorage",
            REACT_APP_MSAL_AUTH_STATE_IN_COOKIE: "false",
            REACT_APP_MSAL_LOGIN_REDIRECT_URI: "https://daikon-${{ env.ENVIRONMENT }}-frontend.azurewebsites.net/" };
            export const appVersion = {
                release: "v0.1.2",
                stream: "Enterprise",
                channel: "Beta" };' > ./src/config.js

            docker build . -t ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend:${{ github.sha }} -t ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend:latest
            docker push --all-tags ${{ steps.azure-keyvault.outputs.github-actions-registry-login-server }}/daikon-frontend
